// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CartItem.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CartItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var quantity: Int32 {
    get {return _quantity ?? 0}
    set {_quantity = newValue}
  }
  /// Returns true if `quantity` has been explicitly set.
  var hasQuantity: Bool {return self._quantity != nil}
  /// Clears the value of `quantity`. Subsequent reads from it will return its default value.
  mutating func clearQuantity() {self._quantity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _productID: String? = nil
  fileprivate var _quantity: Int32? = nil
}

struct PaymentInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var number: String {
    get {return _number ?? String()}
    set {_number = newValue}
  }
  /// Returns true if `number` has been explicitly set.
  var hasNumber: Bool {return self._number != nil}
  /// Clears the value of `number`. Subsequent reads from it will return its default value.
  mutating func clearNumber() {self._number = nil}

  var month: Int32 {
    get {return _month ?? 0}
    set {_month = newValue}
  }
  /// Returns true if `month` has been explicitly set.
  var hasMonth: Bool {return self._month != nil}
  /// Clears the value of `month`. Subsequent reads from it will return its default value.
  mutating func clearMonth() {self._month = nil}

  var year: Int32 {
    get {return _year ?? 0}
    set {_year = newValue}
  }
  /// Returns true if `year` has been explicitly set.
  var hasYear: Bool {return self._year != nil}
  /// Clears the value of `year`. Subsequent reads from it will return its default value.
  mutating func clearYear() {self._year = nil}

  var cvc: String {
    get {return _cvc ?? String()}
    set {_cvc = newValue}
  }
  /// Returns true if `cvc` has been explicitly set.
  var hasCvc: Bool {return self._cvc != nil}
  /// Clears the value of `cvc`. Subsequent reads from it will return its default value.
  mutating func clearCvc() {self._cvc = nil}

  var bank: String {
    get {return _bank ?? String()}
    set {_bank = newValue}
  }
  /// Returns true if `bank` has been explicitly set.
  var hasBank: Bool {return self._bank != nil}
  /// Clears the value of `bank`. Subsequent reads from it will return its default value.
  mutating func clearBank() {self._bank = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var cartItems: [CartItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _number: String? = nil
  fileprivate var _month: Int32? = nil
  fileprivate var _year: Int32? = nil
  fileprivate var _cvc: String? = nil
  fileprivate var _bank: String? = nil
  fileprivate var _name: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CartItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CartItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "productID"),
    2: .same(proto: "quantity"),
  ]

  public var isInitialized: Bool {
    if self._productID == nil {return false}
    if self._quantity == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._productID)
      case 2: try decoder.decodeSingularInt32Field(value: &self._quantity)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._quantity {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CartItem, rhs: CartItem) -> Bool {
    if lhs._productID != rhs._productID {return false}
    if lhs._quantity != rhs._quantity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PaymentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PaymentInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "month"),
    3: .same(proto: "year"),
    4: .same(proto: "cvc"),
    5: .same(proto: "bank"),
    6: .same(proto: "name"),
    7: .same(proto: "cartItems"),
  ]

  public var isInitialized: Bool {
    if self._number == nil {return false}
    if self._month == nil {return false}
    if self._year == nil {return false}
    if self._cvc == nil {return false}
    if self._bank == nil {return false}
    if self._name == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.cartItems) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._number)
      case 2: try decoder.decodeSingularInt32Field(value: &self._month)
      case 3: try decoder.decodeSingularInt32Field(value: &self._year)
      case 4: try decoder.decodeSingularStringField(value: &self._cvc)
      case 5: try decoder.decodeSingularStringField(value: &self._bank)
      case 6: try decoder.decodeSingularStringField(value: &self._name)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.cartItems)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._number {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._month {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._year {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._cvc {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._bank {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if !self.cartItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cartItems, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PaymentInfo, rhs: PaymentInfo) -> Bool {
    if lhs._number != rhs._number {return false}
    if lhs._month != rhs._month {return false}
    if lhs._year != rhs._year {return false}
    if lhs._cvc != rhs._cvc {return false}
    if lhs._bank != rhs._bank {return false}
    if lhs._name != rhs._name {return false}
    if lhs.cartItems != rhs.cartItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
